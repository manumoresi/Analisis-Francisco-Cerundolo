---
title: "Trabajo Práctico Modelos Lineales Generalizados: Análisis de Francisco Cerúndolo"
subtitle: "Simón Gazze - Manuel Moresi"
format: html
editor: visual
---

## Introducción

El tenis es uno de los deportes más populares del mundo, jugado por millones de personas a lo largo de todo el planeta, y se caracteriza por la destreza técnica, el esfuerzo físico y el análisis estratégico que requiere.

A nivel profesional, el circuito mas prestigioso es el de la ATP (Association of Tennis Professionals), en donde estan los mejores jugadores del planeta, compitiendo en diferentes torneos de diferentes categorías y superficies (polvo de ladrillo, cesped y canchas duras). En este circuito existe un ranking de jugadores, el cual los ubica segun sus resultados en el año, y se actualiza cada semana, siendo la posicion nº 1 el mejor tenista de la actualidad.

Argentina ha producido una gran cantidad de tenistas destacados a lo largo de los años, y uno de los más prometedores de la actualidad es Francisco Cerúndolo. Nacido el 13 de agosto de 1998 en Buenos Aires, Cerúndolo ha ascendido rápidamente en el ranking ATP gracias a su consistencia, habilidades técnicas y mentalidad competitiva. Su estilo de juego, caracterizado por un potente golpe de derecha y su movilidad en la cancha, lo ha ayudado a destacarse en torneos importantes, especialmente en superficies de polvo de ladrillo, donde ha tenido varios de sus mejores desempeños.

Cerúndolo ha logrado consolidarse entre los mejores tenistas argentinos de la nueva generación, mostrando gran potencial tanto en torneos nacionales como internacionales. En 2021, dio un gran paso al alcanzar la final del ATP de Buenos Aires, un logro que le permitió ingresar a la élite del tenis mundial. A lo largo de su carrera, ha demostrado tener una gran capacidad para adaptarse a distintas situaciones de juego, enfrentando a rivales de alto nivel y obteniendo victorias clave que han acelerado su progreso en el circuito, las cuales incluyen 3 titúlos ATP, en Bastad 2022, Eastbourne 2023 y Umag 2024.

En este informe, se va a trabajar con una base de datos de 146 partidos, es decir todos los partidos de la carrera de Fran desde su debut en 2020 hasta mayo del 2024 (no incluye el mencionado titulo en Umag de ese año) y cuenta con las siguientes variables:

`fran_win`: variable indicadora de si Cerúndolo ganó o no el partido

`surface`: superficie del partido

`tourney_level`: nivel del torneo

`round`: ronda del torneo en la cual se jugó el partido

`minutes`: duración del parido en minutos

`opp_hand`: mano habil del rival

`opp_age`: edad del rival

`opp_ht`: altura del rival

`opp_rank`: ranking del rival

`pct_fran_1stIn`: porcentaje de primeros servicios adentro de Cerúndolo

`pct_opp_1stIn`: porcentaje de primeros servicios adentro del rival

`pct_fran_1stWon`: porcentaje de primeros servicios ganados de Cerúndolo

`pct_opp_1stWon`: porcentaje de primeros servicios ganados del rival

`pct_fran_2ndWon`: porcentaje de segúndos servicios ganados de Cerúndolo

`pct_opp_2ndWon`: porcentaje de segúndos servicios ganados del rival

`pct_fran_df`: porcentaje de doble faltas sobre todos los puntos de servicio de Cerúndolo

`pct_opp_df`: porcentaje de doble faltas sobre todos los puntos de servicio del rival

`pct_fran_ace`: porcentaje de aces sobre todos los puntos de servicio de Cerúndolo

`pct_opp_ace`: porcentaje de aces sobre todos los puntos de servicio del rival

`pct_fran_bp_saved`: porcentaje de break points salvados de Cerúndolo

`pct_opp_bp_saved`: porcentaje de break points salvados del rival

`pct_fran_bp_wins`: porcentaje de break points ganados de Cerúndolo

`pct_opp_bp_wins`: porcentaje de break points ganados del rival

## Objetivos

El objetivo de este trabajo es modelar la probabilidad de que Cerúndolo gane o no un partido en el circuito, basandose en algunas de las variables ya mencionadas. El análisis de estos factores no solo permite entender mejor los resultados, sino que también ayuda a prever cómo podría desenvolverse en futuros encuentros, lo que es útil tanto para entrenadores como para analistas deportivos.

En resumen, Francisco Cerúndolo es una figura clave en el tenis argentino actual, y su evolución en el circuito profesional será de gran interés para quienes siguen el deporte, y lo que se buscará en este informe es detallar las claves en esta evolución.

## Análisis descriptivo

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
library(readxl)
library(DataExplorer)
library(kableExtra)
library(tidyverse)
library(plotly)
library(glmtoolbox)
library(statmod)
library(gridExtra)
library(knitr)
library(car)
library(janitor)
library(caret)
library(pROC)

#Contamos con una base de datos de todos los partidos del circuito atp los ultimos 50 años, nos vamos
#a centrar en Francisco Cerúndolo

atp_matches_2024 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2024.csv")
atp_matches_2023 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2023.csv")
atp_matches_2022 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2022.csv")
atp_matches_2021 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2021.csv")
atp_matches_2020 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2020.csv")
atp_matches_2019 = read.csv("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/atp_matches_2019.csv")



#Filtramos la base con sus partidos en cada uno de los años desde su debut
cerundolo_w = subset(atp_matches_2024, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2024, loser_name == "Francisco Cerundolo")
cerundolo = rbind(cerundolo_w,cerundolo_l)


cerundolo_w = subset(atp_matches_2023, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2023, loser_name == "Francisco Cerundolo")
cerundolo2 = rbind(cerundolo_w,cerundolo_l)

cerundolo_w = subset(atp_matches_2022, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2022, loser_name == "Francisco Cerundolo")
cerundolo3 = rbind(cerundolo_w,cerundolo_l)

cerundolo_w = subset(atp_matches_2021, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2021, loser_name == "Francisco Cerundolo")
cerundolo4 = rbind(cerundolo_w,cerundolo_l)

cerundolo_w = subset(atp_matches_2020, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2020, loser_name == "Francisco Cerundolo")
cerundolo5 = rbind(cerundolo_w,cerundolo_l)


cerundolo_w = subset(atp_matches_2019, winner_name == "Francisco Cerundolo")
cerundolo_l = subset(atp_matches_2019, loser_name == "Francisco Cerundolo")
cerundolo6 = rbind(cerundolo_w,cerundolo_l)

cerundolo_final = rbind(cerundolo,cerundolo2,cerundolo3,cerundolo4,cerundolo5,cerundolo6)

#Filtramos las variables irrelevantes
#Corregimos los datos faltantes, tanto de rankings,alturas y variables relacionadas al partido
#a mano

cerundolo_final1 <- read_excel("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/cerundolo_final1.xlsx")

df = subset(cerundolo_final, tourney_date > "20240526")
cerundolo_final1 = rbind(cerundolo_final1,df)

cerundolo_final1 = subset(cerundolo_final1, select = -c(tourney_id,tourney_name,draw_size,tourney_date,match_num,winner_id,winner_seed,winner_entry,winner_ioc,loser_id,loser_seed,loser_entry,loser_ioc,score,winner_rank_points,loser_rank_points,w_SvGms,l_SvGms))


cerundolo_final1$fran_win = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",1,0)
#Creamos variables de interes en base a variables con las que contabamos
cerundolo_final1$opp_hand = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_hand,cerundolo_final1$winner_hand)
cerundolo_final1$opp_ht = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_ht,cerundolo_final1$winner_ht)
cerundolo_final1$opp_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_age,cerundolo_final1$winner_age)


#porcentaje de victorias

sum(cerundolo_final1$fran_win)/189 #gano el 53.4% de los partidos que jugo

cerundolo_final1$fran_win = as.factor(cerundolo_final1$fran_win)

#por superficie
table(cerundolo_final1$surface)


#Calculo opp ranking

cerundolo_final1$opp_rank = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_rank,cerundolo_final1$winner_rank)


w=cerundolo_final1$opp_rank[cerundolo_final1$fran_win == "1"]
median(w, na.rm=TRUE)
l=cerundolo_final1$opp_rank[cerundolo_final1$fran_win == "0"]
median(l, na.rm=TRUE)

#ranking trasnformado

cerundolo_final1$fran_rank = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$winner_rank,cerundolo_final1$loser_rank)

cerundolo_final1$fran_rank_trans = 8 - log2(cerundolo_final1$fran_rank)
cerundolo_final1$opp_rank_trans = 8 - log2(cerundolo_final1$opp_rank)

cerundolo_final1$dif_rank = cerundolo_final1$fran_rank_trans - cerundolo_final1$opp_rank_trans


mean(cerundolo_final1$dif_rank, na.rm=TRUE)

#Creamos fran_age y opp_age

cerundolo_final1$fran_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$winner_age,cerundolo_final1$loser_age)
cerundolo_final1$opp_age = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$loser_age,cerundolo_final1$winner_age)

#Planteamos las estadísticas del partido para fran y los oponentes

cerundolo_final1$fran_ace = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_ace,cerundolo_final1$l_ace)
cerundolo_final1$opp_ace = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_ace,cerundolo_final1$w_ace)
cerundolo_final1$fran_df = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_df,cerundolo_final1$l_df)
cerundolo_final1$opp_df = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_df,cerundolo_final1$w_df)
cerundolo_final1$fran_svpt = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_svpt,cerundolo_final1$l_svpt)
cerundolo_final1$opp_svpt = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_svpt,cerundolo_final1$w_svpt)
cerundolo_final1$fran_1stIn = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_1stIn,cerundolo_final1$l_1stIn)
cerundolo_final1$opp_1stIn = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_1stIn,cerundolo_final1$w_1stIn)
cerundolo_final1$fran_1stWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_1stWon,cerundolo_final1$l_1stWon)
cerundolo_final1$opp_1stWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_1stWon,cerundolo_final1$w_1stWon)
cerundolo_final1$fran_2ndWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_2ndWon,cerundolo_final1$l_2ndWon)
cerundolo_final1$opp_2ndWon = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_2ndWon,cerundolo_final1$w_2ndWon)
cerundolo_final1$fran_bpSaved = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_bpSaved,cerundolo_final1$l_bpSaved)
cerundolo_final1$opp_bpSaved = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_bpSaved,cerundolo_final1$w_bpSaved)
cerundolo_final1$fran_bpFaced = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$w_bpFaced,cerundolo_final1$l_bpFaced)
cerundolo_final1$opp_bpFaced = ifelse(cerundolo_final1$winner_name == "Francisco Cerundolo",cerundolo_final1$l_bpFaced,cerundolo_final1$w_bpFaced)

#borramos las variables de winner y loser

cerundolo_final1 = subset(cerundolo_final1, select = -c(winner_hand,winner_ht,winner_age,winner_rank,loser_rank,loser_hand,loser_ht,loser_age,w_ace,w_df,w_svpt,w_1stIn,w_1stWon,w_2ndWon,w_bpSaved,w_bpFaced,l_ace,l_df,l_svpt,l_1stIn,l_1stWon,l_2ndWon,l_bpSaved,l_bpFaced,fran_rank,opp_rank))

#Realizamos la transformacion de las variables: cant de servicios, cantidad de primeros servicios
#en juego, cant de juegos de primer servicio ganados, cant de juegos de segundo servicio ganados,
#cant de break points y cant de aces.

#Porcentaje de primeros servicios dentro
cerundolo_final1$pct_fran_1stIn= (cerundolo_final1$fran_1stIn/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_1stIn= (cerundolo_final1$opp_1stIn/cerundolo_final1$opp_svpt)
#Porcentaje de primeros servicios dentro ganados
cerundolo_final1$pct_fran_1stInWon= (cerundolo_final1$fran_1stWon/cerundolo_final1$fran_1stIn)
cerundolo_final1$pct_opp_1stInWon= (cerundolo_final1$opp_1stWon/cerundolo_final1$opp_1stIn)
#Porcentaje de primeros servicios ganados
cerundolo_final1$pct_fran_1stWon= cerundolo_final1$pct_fran_1stInWon*cerundolo_final1$pct_fran_1stIn
cerundolo_final1$pct_opp_1stWon= cerundolo_final1$pct_opp_1stInWon*cerundolo_final1$pct_opp_1stIn

#Porcentaje de segundos servicios dentro
cerundolo_final1$pct_fran_2ndIn= ((cerundolo_final1$fran_svpt-cerundolo_final1$fran_1stIn-cerundolo_final1$fran_df)/(cerundolo_final1$fran_svpt-cerundolo_final1$fran_1stIn))
cerundolo_final1$pct_opp_2ndIn= ((cerundolo_final1$opp_svpt-cerundolo_final1$opp_1stIn-cerundolo_final1$opp_df)/(cerundolo_final1$opp_svpt-cerundolo_final1$opp_1stIn))
#Porcentaje de segundos servicios dentro ganados
cerundolo_final1$pct_fran_2ndInWon= (cerundolo_final1$fran_2ndWon/(cerundolo_final1$fran_svpt-cerundolo_final1$fran_1stIn-cerundolo_final1$fran_df))
cerundolo_final1$pct_opp_2ndInWon= (cerundolo_final1$opp_2ndWon/(cerundolo_final1$opp_svpt-cerundolo_final1$opp_1stIn-cerundolo_final1$opp_df))
#Porcentaje de segundos servicios ganados
cerundolo_final1$pct_fran_2ndWon= (cerundolo_final1$fran_2ndWon/(cerundolo_final1$fran_svpt-cerundolo_final1$fran_1stIn))
cerundolo_final1$pct_opp_2ndWon= (cerundolo_final1$opp_2ndWon/(cerundolo_final1$opp_svpt-cerundolo_final1$opp_1stIn))


#Ver si trabajamos con los aces o dobles faltas

#dobles faltas
cerundolo_final1$pct_fran_df= (cerundolo_final1$fran_df/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_df= (cerundolo_final1$opp_df/cerundolo_final1$opp_svpt)
#aces
cerundolo_final1$pct_fran_ace= (cerundolo_final1$fran_ace/cerundolo_final1$fran_svpt)
cerundolo_final1$pct_opp_ace= (cerundolo_final1$opp_ace/cerundolo_final1$opp_svpt)

#break points convertidos

cerundolo_final1$pct_fran_bp_wins= ((cerundolo_final1$opp_bpFaced-cerundolo_final1$opp_bpSaved)/cerundolo_final1$opp_bpFaced)
cerundolo_final1$pct_opp_bp_wins= ((cerundolo_final1$fran_bpFaced-cerundolo_final1$fran_bpSaved)/cerundolo_final1$fran_bpFaced)

#break points salvados
cerundolo_final1$pct_fran_bp_saved = 1 - cerundolo_final1$pct_opp_bp_wins
cerundolo_final1$pct_opp_bp_saved = 1 - cerundolo_final1$pct_fran_bp_wins

#imputamos los valores de la mano habil de los q faltaban

cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Aleksandar Kovacevic"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Vilius Gaubas"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Manuel Guinard"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$loser_name == "Justin Engel"] <- "R"
cerundolo_final1$opp_hand[cerundolo_final1$winner_name == "Ryan Peniston"] <- "L"

cerundolo_final1$opp_ht[cerundolo_final1$loser_name == "Justin Engel"] <- 185

cerundolo_final1$minutes[cerundolo_final1$loser_name == "Yannick Hanfmann" & cerundolo_final1$round == "R128"] <- 118
cerundolo_final1$minutes[cerundolo_final1$loser_name == "Tommy Paul" & cerundolo_final1$tourney_level == "G"] <- 170
cerundolo_final1$minutes[cerundolo_final1$loser_name == "Filip Misolic" & cerundolo_final1$tourney_level == "G"] <- 124
cerundolo_final1$minutes[cerundolo_final1$loser_name == "Tomas Barrios Vera"] <- 80
cerundolo_final1$minutes[cerundolo_final1$loser_name == "Ugo Humbert"] <- 165
cerundolo_final1$minutes[cerundolo_final1$winner_name == "Novak Djokovic"] <- 279
cerundolo_final1$minutes[cerundolo_final1$loser_name == "Casper Ruud" & cerundolo_final1$tourney_level == "O"] <- 86


```

### Proporción de victorias

```{r, echo=FALSE, warning=FALSE, fig.align='center'}

porc_victorias = data.frame(resultado= c("Perdió","Ganó"),
                            porcentaje= c(46.56,53.43))

porc_victorias$ypos <- cumsum(porc_victorias$porcentaje) - 0.5 * porc_victorias$porcentaje

# Crear el gráfico de dona
ggplot(porc_victorias, aes(x = 2, y = porcentaje, fill = resultado)) +
  geom_bar(stat = "identity", width = 1, color = "white") +  # Gráfico de barras (de pastel)
  coord_polar(theta = "y", start = 0) +   # Convertir en gráfico circular
  geom_text(aes(y = ypos, label = paste0(porcentaje, "%")), color = "white") +  
  xlim(0.1, 2.5) + # Crear el agujero en el centro
  theme_void() + 
  labs(fill = "Resultado") +  
  #ggtitle("Porcentaje de victorias")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))+
  theme(plot.title = element_text(hjust = 0.5))

```

Se puede observar que Fran ganó el 53.43% de sus partidos a lo largo de su carrera, lo cual es un gran desempeño para un jugador en sus primeros años en el circuito.

### Resultados por superficie

```{r, echo=FALSE, warning=FALSE, fig.align='center'}
cerundolo_final1$fran_win = factor(cerundolo_final1$fran_win,levels = c(1,0),labels = c("Ganó","Perdió"))

g = ggplot(cerundolo_final1, aes(x = surface,fill = surface)) +
  geom_bar() + 
  #ggtitle("Partidos según la superficie ")+
  xlab("Superficie")+
  ylab("Frecuencia")+
  theme(plot.title = element_text(hjust = 0.5))+
  scale_fill_manual(values = c("Clay"="sienna2","Grass"="palegreen3","Hard"="royalblue3"))+
  facet_wrap(~fran_win)+
  theme_minimal()+
  theme(legend.position = "none")+
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(g)

```

Se puede apreciar que la mayor cantidad de partidos los jugó en polvo de ladrillo, algo común en jugadores argentinos, y muy pocos partidos en cesped, ya que es la superficie con menos torneos en el circuito.

```{r, echo=FALSE, warning=FALSE}
tabla_s=table(cerundolo_final1$surface, cerundolo_final1$fran_win)
tabla_prop= prop.table(tabla_s,margin = 1)
tabla1=kable(round(tabla_prop,2), caption = "Tabla 1: Proporción de victorias según superficie")%>% 
  kable_styling(position = "center",full_width = FALSE) %>% 
  row_spec(0, bold = T, background = "steelblue1", color = "black")%>% 
  row_spec(1, bold = F, background = "sienna2", color = "black")%>% 
  row_spec(2, bold = F, background = "palegreen3", color = "black")%>% 
  row_spec(3, bold = F, background = "royalblue3", color = "black")
tabla1
```

Y en la Tabla 1, se ve que tanto en polvo de ladrillo como en cesped tiene un record positivo (más victorias que derrotas), en cambio en canchas duras posee un record negativo.

### Resultados por ronda

```{r, echo=FALSE, warning=FALSE}
cerundolo_final1$round = factor(cerundolo_final1$round,levels = c("RR","R128","R64","R32","R16","QF","SF","F"))

tabla = table(cerundolo_final1$round, cerundolo_final1$fran_win)

tabla2 = kable(tabla, caption = "Tabla 2: Resultados por ronda") %>% kable_styling(position = "center",full_width = F) %>% row_spec(0, bold = T, background = "steelblue1", color = "black") 
tabla2
```

En la Tabla 2, se puede ver que tiene un record equilibrado en cada una de las rondas que se juegan dentro de los diferentes torneos del circuito. Se puede sospechar que la ronda en la cual juegue Frank, no parece influir en la probablidad de conseguir una victoria.

### Resultados según la mano habil del rival

```{r, echo=FALSE, warning=FALSE,fig.align='center', message=FALSE}
library(vcd)
library(plotly)
g1=mosaic(
  formula = ~  fran_win + opp_hand , 
  data = cerundolo_final1, 
  direction = "v",
  highlighting = "opp_hand", 
  highlighting_fill = c("steelblue4","steelblue1"),
  labeling = labeling_border, 
       labeling_args = list(gp_labels = gpar(col = "black", fontsize = 12),  
                            gp_varnames = gpar(col = "white", fontsize = 14))) 
       #main = "Resultados según la mano habil del rival")

```

Se sabe que la mayor cantidad de jugadores en el circuito son derechos, por lo que se observa que la mayor cantidad de rivales de Fran son derechos, mientras que vemos que la proporción de victorias y derrotas es similar tanto para jugadores diestros como para los zurdos. Lo cual da indicio de que esta variable no parecería influir en la respuesta.

### Distribución de la edad y la altura del rival según el resultado

```{r, echo=FALSE, warning=FALSE, fig.align='center', message=FALSE}

library(ggridges)
ggplot(cerundolo_final1) +
  aes(y = fran_win, x = opp_age, fill = fran_win) +
  geom_density_ridges() +
  labs(x = "Edad del rival (años)", y = "Resultado") +
  ggtitle("Distribución de la edad del rival según el resultado")+
  theme_ridges() + 
  theme(legend.position = "none") +
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))

```

```{r, echo=FALSE, warning=FALSE, fig.align='center', message=FALSE}

library(ggridges)
ggplot(cerundolo_final1) +
  aes(y = fran_win, x = opp_ht, fill = fran_win) +
  geom_density_ridges() +
  labs(x = "Altura del rival (cm)", y = "Resultado") +
  ggtitle("Distribución de la altura del rival según el resultado")+
  theme_ridges() + 
  theme(legend.position = "none")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))

```

Tanto la edad como la altura del rival no parecen ser muy influyentes a la hora de evidenciar la posibilidad de un resultado.

### Distribución de la duracion de los partidos según el resultado

```{r, echo=FALSE, warning=FALSE, fig.align='center', message=FALSE}
ggplot(cerundolo_final1) +
  aes(y = minutes, x = fran_win, fill = fran_win) +
  geom_boxplot() +
  labs(x = "Resultado", y = "Duración del partido (min)") +
  theme(legend.position = "none")+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))
```

Al observar las distribuciones en la duración de los partidos que ganó y que perdió, parecen no diferir demasiado, por lo que podria no ser un factor influyente en la probabilidad de ganar un partido.

### Distribución del ranking del rival según el resultado

```{r, echo=FALSE, warning=FALSE, fig.align='center', message=FALSE}
g1=ggplot(cerundolo_final1) +
  aes(x = opp_rank, fill = fran_win) +
  geom_histogram(bins = 10) +
  labs(x = "Ranking del opponente", y = "Frecuencia") +
  theme(legend.position = "none")+
  facet_wrap(~fran_win)+
  # Punto en el valor 61 para el gráfico de la izquierda
  geom_point(data = subset(cerundolo_final1, fran_win == levels(cerundolo_final1$fran_win)[1]), 
             aes(x = 61, y = 0), color = "blue", size = 3) +
  # Punto en el valor 36 para el gráfico de la derecha
  geom_point(data = subset(cerundolo_final1, fran_win == levels(cerundolo_final1$fran_win)[2]), 
             aes(x = 36, y = 0), color = "blue", size = 3)+
  scale_fill_manual(values = c("Perdió"="steelblue1","Ganó"="steelblue4"))

ggplotly(g1)

```

Se observan distribuciones en los rankings de los oponentes de Fran asimetricas a la derecha, tanto si gana como si pierde. Esto es debido a que en pocas competiciones (por ejemplo Copa Davis o Grand Slams) participan jugadores de menor categoria, pero la gran mayoria de los jugadores del circuito se encuentran dentro del top 150 del ranking.

La mediana del ranking de los oponentes cuando Fran gana es de 61, mientras que cuando pierde de 36, lo que muestra que el ranking podria ser decisivo a la hora de analizar la probabilidad de ganar un partido.

### Resultados según el nivel del torneo

```{r, echo=FALSE, warning=FALSE, fig.align='center', message=FALSE}
cerundolo_final1$tourney_level = factor(cerundolo_final1$tourney_level, levels = c("A","M","G","D"))

ggplot(cerundolo_final1) +
  aes(x = fran_win, fill = tourney_level) +
  geom_bar(position = "dodge") +
  labs(x = "Resultado", y = "Frecuencia", fill = "Nivel del torneo") +
  scale_fill_manual(values = c("A"="darkslategray3", "D"="seagreen", "G"="indianred2", "M"="goldenrod2"),labels = c("ATP 250 y ATP 500", "Masters 1000", "Grand Slam", "Copa Davis"))



```

La mayoría de sus partidos y victorias fueron en los torneos de menor nivel del circuito (ATP 250 y ATP 500). Al tener proporciones de victorias parecidas en todos los niveles de torneos, parece no influir en la variable respuesta.

### Radar chart para estadísticas del juego según el resultado

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(fmsb)
library(scales)

radar_fran <- cerundolo_final1 %>%
  select(group = fran_win, #necesario para la funcion ggradar
    In_1st = pct_fran_1stIn, 
    Won_1st = pct_fran_1stWon,
    Won_2nd = pct_fran_2ndWon, 
    df = pct_fran_df, 
    aces = pct_fran_ace,
    bp_win= pct_fran_bp_wins,
    bp_saved= pct_fran_bp_saved
    ) %>% 
  mutate_if(is.numeric, rescale)


# Crear subconjuntos de datos para "Ganó" y "Perdió"
df_gano <- radar_fran[radar_fran$group == "Ganó", c("In_1st", "Won_1st", "Won_2nd", "df", "aces", "bp_win", "bp_saved")]
df_perdio <- radar_fran[radar_fran$group == "Perdió", c("In_1st", "Won_1st", "Won_2nd", "df", "aces", "bp_win", "bp_saved")]

# Calcular el promedio de las variables para cada grupo
promedios_gano <- colMeans(df_gano,na.rm = T)
promedios_perdio <- colMeans(df_perdio,na.rm = T)

# Agregar filas para los valores máximos y mínimos que definan los límites del radar chart
max_vals <- rep(1, 7)  # Máximo 1 (porque las variables están reescaladas)
min_vals <- rep(0, 7)  # Mínimo 0

# Crear un data frame con los valores de "Ganó" y "Perdió"
df_radar <- as.data.frame(rbind(max_vals, min_vals, promedios_gano, promedios_perdio))

# Asignar nombres de fila para el gráfico
rownames(df_radar) <- c("Max", "Min", "Ganó", "Perdió")

# Colores de las áreas en tonos de azul
areas <- c(rgb(0, 0, 0.9, 0.25),  # Azul claro (más transparente)
           rgb(0, 0.5, 1, 0.25)) # Azul más oscuro

# Colores para las líneas en azul
lineas <- c(rgb(0, 0, 0.9),       # Azul claro
            rgb(0, 0.5, 1))     # Azul oscuro

# Gráfico de radar
radarchart(df_radar,
           cglty = 1,       # Tipo de línea del grid
           cglcol = "gray", # Color de las líneas del grid
           pcol = lineas,   # Color para cada línea (tonos de azul)
           plwd = 2,        # Ancho para cada línea
           plty = 1,        # Tipo de línea
           pfcol = areas)   # Color de las áreas

legend("bottomright",
       legend = c("Ganó", "Perdió"),
       bty = "n", pch = 20, col = areas,
       text.col = "black", pt.cex = 2)

title(main = "Estadistícas de juego de Cerúndolo")



```

Se observa que las estadística de juego de Fran van a presentar en general mejores porcentajes en los partidos en los cuales el gana, viendo que el porcentaje de primeros servicios en juego y de dobles faltas son las estadisticas que menor diferencia presentan en relación a sí gana o pierde el partido.

```{r, echo=FALSE, warning=FALSE, message=FALSE}

radar_opp <- cerundolo_final1 %>%
  select(
    group = fran_win, #necesario para la funcion ggradar
    In_1st = pct_opp_1stIn, 
    Won_1st = pct_opp_1stWon,
    Won_2nd = pct_opp_2ndWon, 
    df = pct_opp_df, 
    aces = pct_opp_ace,
    bp_win= pct_opp_bp_wins,
    bp_saved= pct_opp_bp_saved
    ) %>% 
  mutate_if(is.numeric, rescale)


# Crear subconjuntos de datos para "Ganó" y "Perdió"
df_gano <- radar_opp[radar_opp$group == "Ganó", c("In_1st", "Won_1st", "Won_2nd", "df", "aces", "bp_win", "bp_saved")]
df_perdio <- radar_opp[radar_opp$group == "Perdió", c("In_1st", "Won_1st", "Won_2nd", "df", "aces", "bp_win", "bp_saved")]

# Calcular el promedio de las variables para cada grupo
promedios_gano <- colMeans(df_gano,na.rm = T)
promedios_perdio <- colMeans(df_perdio,na.rm = T)

# Agregar filas para los valores máximos y mínimos que definan los límites del radar chart
max_vals <- rep(1, 7)  # Máximo 1 (porque las variables están reescaladas)
min_vals <- rep(0, 7)  # Mínimo 0

# Crear un data frame con los valores de "Ganó" y "Perdió"
df_radar1 <- as.data.frame(rbind(max_vals, min_vals, promedios_gano, promedios_perdio))

# Asignar nombres de fila para el gráfico
rownames(df_radar1) <- c("Max", "Min", "Ganó", "Perdió")

# Gráfico de radar
radarchart(df_radar1,
           cglty = 1,       # Tipo de línea del grid
           cglcol = "gray", # Color de las líneas del grid
           pcol = lineas,   # Color para cada línea (tonos de azul)
           plwd = 2,        # Ancho para cada línea
           plty = 1,        # Tipo de línea
           pfcol = areas)   # Color de las áreas

legend("bottomright",
       legend = c("Ganó", "Perdió"),
       bty = "n", pch = 20, col = areas,
       text.col = "black", pt.cex = 2)

title(main = "Estadísticas de juego del rival")


```

De manera concordante con lo visto en el grafico anterior, se ve que las estadísticas de juego del rival serán en general mayores cuando Fran pierda el partido, quedando en evidencia una gran diferencia en los puntos de primer servicio ganados.

## Modelo Estadístico

### Selección de variables

Para modelar la probabilidad de que Fran gane el partido, se aplicará un modelo lineal generalizado con enlace $logit$ y para decidir que variables resultan significativas en la respuesta, se realiza una selección de variables "paso a paso", con todas las variables definidas anteriormente. Para este procedimiento se utilizará la variable `dif_rank` en vez de la variable `opp_rank`, ya que parece más adecuado trabajar con la diferencia de ranking al momento del partido debido a que el ranking de Fran varía mucho desde su debut hasta el día de hoy.

El método automático utilizado para esta selección de variables, se basa en la diferencia de AIC entre los modelos para decidir cual es modelo óptimo a utilizar.

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
cerundolo_modelo= subset(cerundolo_final1, select= c(surface,tourney_level,minutes,fran_win,opp_hand,opp_ht,opp_age,dif_rank,pct_fran_1stIn,pct_opp_1stIn,pct_fran_1stWon,pct_opp_1stWon,pct_fran_2ndWon,pct_opp_2ndWon,pct_fran_df,pct_opp_df,pct_fran_ace,pct_opp_ace,pct_fran_bp_wins,pct_opp_bp_wins,pct_fran_bp_saved,pct_opp_bp_saved))

cerundolo_modelo = na.omit(cerundolo_modelo)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide',}
# Modelo completo
cerundolo_modelo$fran_win1 = ifelse(cerundolo_modelo$fran_win == "Ganó",1,0)
cerundolo_modelo = subset(cerundolo_modelo, select = -c(fran_win))

modelo_completo <- glm(fran_win1 ~ ., data = cerundolo_modelo, family = binomial(link = "logit"))

# Selección de variables paso a paso basada en AIC
modelo_seleccionado <- step(modelo_completo, direction = "both")
```

Luego de aplicar este método, se retienen las siguientes variables: edad del oponente, porcentaje de puntos ganados con el primer servicio, porcentaje de puntos ganados del rival con el primer servicio, porcentaje de puntos ganados por el rival con el segundo servicio, porcentaje de puntos de break point ganados por Fran y el porcentaje de puntos de break point ganados por el rival.

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
modelo_final = glm(fran_win1 ~ opp_age + pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo,family = binomial(link="logit"))

summary(modelo_final)


# Test de Hosmer-Lemeshow usando hltest de glmtoolbox
hltest(modelo_final)

#El modelo ajusta

```

$logit(\pi_i)=ln(\frac{\pi_i}{1-\pi_i})= \beta_{0}+\beta_{1}*OppAge_i+\beta_{2}*Fran1stWon_i+\beta_{3}*Opp1stWon_i+\beta_{4}*Fran2ndWon_i+$ $+\beta_{5}*Opp2ndWon_i+\beta_{6}*FranBpWin+\beta_{7}*OppBpWin$

Se realizó el test de Hosmer-Lemeshow para probar la bondad de ajuste del modelo, y se ubtuvo un $p-value=0.83$, por lo que se puede concluir que el modelo ajusta.

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
modelo_cuasi_final = glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo,family = binomial(link="logit"))

anova(modelo_cuasi_final, modelo_final, test="LRT")

#Podríamos sacarla del modelo

modelo_final = glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo,family = binomial(link="logit"))
```

Finalmente, se generaron dudas con respecto a la significancia de la variable `opp_age` en el modelo, debido a que en la parte descriptiva parecía no influir significativamente en la respuesta y presenta un $p-value=0.11$ en el test de Wald. Para probar si esta variable es realmente significtiva, se realiza un test de razón de verosimilitud comparando el modelo propuesto con uno que no tenga la variable `opp_age`, el cual arroja un $p-value=0.10$, por lo que no se rechaza la hipótesis de que el efecto de esta variable es nulo. Por lo tanto se decide quitar esta variable del modelo:

$logit(\pi_i)=ln(\frac{\pi_i}{1-\pi_i})= \beta_{0}+\beta_{1}*Fran1stWon_i+\beta_{2}*Opp1stWon_i+\beta_{3}*Fran2ndWon_i+\beta_{4}*Opp2ndWon_i+$ $+\beta_{5}*FranBpWin+\beta_{6}*OppBpWin$

### Evaluación de Linealidad

El modelo presentado incorpora las seis variables expicativas de forma lineal, entonces se debe evaluar si esto es adecuado. Se realizan los test correspondientes y se observa que la única variable que no presenta un comportamiento lineal es `pct_opp_1stWon`, por lo que el modelo final incorpora esta variable a través de Dummies. El modelo final resulta:

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat1= cut(pct_fran_1stWon, breaks = c(0, 0.59, 0.65, 0.693, 0.75, Inf)),
         ord1= cut(pct_fran_1stWon, breaks = c(0, 0.59, 0.65, 0.693, 0.75, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ cat1 + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ ord1 + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal


cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat2= cut(pct_opp_1stWon, breaks = c(0, 0.6, 0.65, 0.7, 0.75, Inf)),
         ord2= cut(pct_opp_1stWon, breaks = c(0, 0.6, 0.65, 0.7, 0.75, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ pct_fran_1stWon + cat2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ pct_fran_1stWon + ord2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#Rechazo Ho) el efecto no es lineal, uso la variable con dummies

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat3= cut(pct_fran_2ndWon, breaks = c(0, 0.4, 0.47, 0.52, 0.59, Inf)),
         ord3= cut(pct_fran_2ndWon, breaks = c(0, 0.4, 0.47, 0.52, 0.59, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + cat3 + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + ord3 + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat4= cut(pct_opp_2ndWon, breaks = c(0, 0.4, 0.45, 0.52, 0.59, Inf)),
         ord4= cut(pct_opp_2ndWon, breaks = c(0, 0.4, 0.45, 0.52, 0.59, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + cat4 + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    ord4 + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat5= cut(pct_fran_bp_wins, breaks = c(0, 0.275, 0.375, 0.47, 0.64, Inf)),
         ord5= cut(pct_fran_bp_wins, breaks = c(0, 0.275, 0.375, 0.47, 0.64, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon +
    pct_opp_2ndWon + cat5 + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + ord5 + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

cerundolo_modelo <- cerundolo_modelo %>%
  mutate(cat6= cut(pct_opp_bp_wins, breaks = c(0, 0.275, 0.375, 0.5, 0.6, Inf)),
         ord6= cut(pct_opp_bp_wins, breaks = c(0, 0.275, 0.375, 0.5, 0.6, Inf), labels = F) )

modelo_l1 =glm(fran_win1 ~pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon +
    pct_opp_2ndWon + pct_fran_bp_wins + cat6, data=cerundolo_modelo, family=binomial(link="logit"))

modelo_l2=glm(fran_win1 ~ pct_fran_1stWon + pct_opp_1stWon + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + ord6, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_l2,modelo_l1, test="LRT")

#No rechazo Ho), el efecto es lineal

```

$logit(\pi_i)=ln(\frac{\pi_i}{1-\pi_i})= \beta_{0}+\beta_{1}*Fran1stWon_i+\beta_{2}*D_{(0.6,0.65)i}+\beta_{3}*D_{(0.65,0.7)i}+$ $+\beta_{4}*D_{(0.7,0.75)i}+\beta_{5}*D_{(0.75,Inf)i}+\beta_{6}*Fran2ndWon_i+\beta_{7}*Opp2ndWon_i+\beta_{8}*FranBpWin+\beta_{9}*OppBpWin$

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}
modelo_final = glm(fran_win1 ~ pct_fran_1stWon + cat2 + pct_fran_2ndWon + 
    pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins, data=cerundolo_modelo, family=binomial(link="logit"))

summary(modelo_final)
```

Y el modelo estimado:

$logit(\hat{\pi_i})=ln(\frac{\hat{\pi_i}}{1-\hat\pi_i})= -16.23+36.19*Fran1stWon_i-3.86*D_{(0.6,0.65)i}-5.63*D_{(0.65,0.7)i}-5.20*D_{(0.7,0.75)i}-$ $-12.43*D_{(0.75,Inf)i}+19.61*Fran2ndWon_i-26.49*Opp2ndWon_i+8.88*FranBpWin-7.40*OppBpWin$

### Adecuación de la función de enlace

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

pred.logit<-predict(modelo_final)
cerundolo_modelo$pred.2.logit<-pred.logit*pred.logit

modelo_logit.2 <- glm(fran_win1 ~ pct_fran_1stWon + cat2 + pct_fran_2ndWon + pct_opp_2ndWon + pct_fran_bp_wins + pct_opp_bp_wins+ pred.2.logit, data=cerundolo_modelo, family=binomial(link="logit"))

anova(modelo_final, modelo_logit.2, test="LRT")


```

Para probar que el enlace $logit$ elegido es adecuado, se realiza un test de razón de verosimilitud, comparando el modelo actual con el mismo modelo más el predictor lineal al cuadrado. Este test arroja un $p-value=0.82$, por lo que no se rechaza la hipótesis de que el predictor lineal al cuadrado no aporta significativamente, y el modelo planteado en principio con el enlace $logit$ es adecuado.

### Análisis de residuos y multicolinealidad

Para comprobar el cumplimiento de los residuos, se trabajan con residuos cuantiles ya que la variable respuesta es binaria.

#### Gráfico de residuos cuantil vs. las probabilidades estimadas

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 4*1.33*2}
# Residuos cuantil
rQ.final <- qresid(modelo_final)

### Gráfico de residuos cuantil vs. probabilidades estimadas (ajuste logit)
G1 <- ggplot(cerundolo_modelo, aes(y = rQ.final, x = fitted(modelo_final))) + 
  geom_point(fill = "steelblue3", shape = 21, size = 3) +
  geom_hline(yintercept = 0) + ylim(-3, 3) + 
  geom_hline(yintercept = -3, linetype = "dashed") + 
  geom_hline(yintercept =  3, linetype = "dashed") +
  labs(x = expression(hat(pi)), y = "Residuos cuantil") +
  theme_minimal()
G1
```

No se observa una clara tendencia en el gráfico, por lo que se concluye que la parte sistemática del modelo es adeucuada.

#### Gráfico probabilístico normal con residuos cuantil

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width = 4*1.33*2}
# Gráfico QQ
G2 <- ggplot(cerundolo_modelo, aes(sample = rQ.final)) +
  stat_qq(distribution = qnorm, fill = "steelblue3", shape = 21, size = 3) +
  stat_qq_line() +
  labs(x = "Cuantiles teóricos", y = "Cuantiles de los residuos cuantil") +
  theme_minimal()

G2
```

Se aprecia que los datos se ajustan a la recta, por lo tanto el modelo parece ser adecuado.

#### Multicolinealidad

Al contar con cinco variables explicativas continuas, será necesario evaluar la presencia de multicolinealidad de dichas variables, la cual podría estar influenciando los resultados del modelo. Para esto se calcula la matriz de correlación de dichas variables y el factor de inflación de la variancia (VIF).

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(corrplot)
cerundolo_modelo[c(10,12,13,18,19)] %>% cor(method="pearson") %>% round(digits=2) -> mat_cor

corrplot(mat_cor, type="upper", order="hclust", tl.col="black", tl.srt=45)

```

Al ver el gráfico de las correlaciones se observa que no hay correlaciones altas entre las variablas explicativas, y al calcular los VIF todos dan menores a 2, con lo cual se concluye que no hay presencia de multicolinealidad.

## Interpretación y Resultados

### Variables continuas

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

ro_1 = exp(36.196*(0.05))
ro_1

ro_2= exp(19.616*0.05)
ro_2

ro_3 = exp(-26.462*(-0.05))
ro_3

ro_4= exp(8.884*0.1)
ro_4

ro_5= exp(-7.402*(-0.1))
ro_5

```

`pct_fran_1stWon`: $\hat{RH}_{x+0.05vsx} = e^{\hat{\beta_{1}}*0.05} = e^{36.196*0.05} = 6.10$

Ante un aumento del 5% en el porcentaje de puntos ganados con el primer servicio, la chance de que Francisco Cerúndolo gane el partido aumenta un 510%, para valores fijos de las demás variables.

`pct_fran_2ndWon`: $\hat{RH}_{x+0.05vsx} = e^{\hat{\beta_{6}}*0.05} = e^{19.616*0.05} = 2.66$

Ante un aumento del 5% en el porcentaje de puntos ganados con el segundo servicio, la chance de que Francisco Cerúndolo gane el partido aumenta un 166%, para valores fijos de las demás variables.

`pct_opp_2ndWon`: $\hat{RH}_{x-0.05vsx} = e^{\hat{\beta_{7}}*(-0.05)} = e^{(-26.462)*(-0.05)} = 3.75$

Ante una disminución del 5% en el porcentaje de puntos ganados del rival con el segundo servicio, la chance de que Francisco Cerúndolo gane el partido aumenta un 275%, para valores fijos de las demás variables.

`pct_fran_bp_wins`: $\hat{RH}_{x+0.1vsx} = e^{\hat{\beta_{8}}*0.1} = e^{8.884*0.1} = 2.43$

Ante un aumento del 10% en el porcentaje de break points ganados, la chance de que Francisco Cerúndolo gane el partido aumenta un 143%, para valores fijos de las demás variables.

`pct_opp_bp_wins`: $\hat{RH}_{x-0.1vsx} = e^{\hat{\beta_{9}}*(-0.1)} = e^{(-7.402)*(-0.1)} = 2.09$

Ante una disminución del 10% en el porcentaje de break points ganados del rival, la chance de que Francisco Cerúndolo gane el partido aumenta un 109%, para valores fijos de las demás variables.

#### Curvas de probabilidad estimada

Para cada una de las cinco variables continuas se calcúla la curva de probabilidad estimada, con sus respectivos intervalos de confianza. Hay que tener en cuenta que las restantes variables son fijadas en su media.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#variable 1

valores_var <- data.frame(pct_fran_1stWon = seq(0, 1, length.out = 100))

valores_var$pct_fran_2ndWon <- mean(cerundolo_modelo$pct_fran_2ndWon, na.rm = TRUE)
valores_var$pct_opp_2ndWon <- mean(cerundolo_modelo$pct_opp_2ndWon, na.rm = TRUE)
valores_var$pct_fran_bp_wins <- mean(cerundolo_modelo$pct_fran_bp_wins, na.rm = TRUE)
valores_var$pct_opp_bp_wins <- mean(cerundolo_modelo$pct_opp_bp_wins, na.rm = TRUE)

valores_var$cat2 <- "(0.65,0.7]" 

# Obtener predicciones y errores estándar con predict()
predicciones <- predict(modelo_final, newdata = valores_var, type = "link", se.fit = TRUE)

# Convertir las predicciones al espacio de probabilidades usando la función logística
valores_var$pred_prob <- plogis(predicciones$fit)

# Calcular el intervalo de confianza (95%)
valores_var$conf_inf <- plogis(predicciones$fit - 1.96 * predicciones$se.fit)
valores_var$conf_sup <- plogis(predicciones$fit + 1.96 * predicciones$se.fit)

# Graficar la curva con el intervalo de confianza
G1=ggplot(valores_var, aes(x = pct_fran_1stWon, y = pred_prob)) +
  geom_line(color = "steelblue3", size = 1) +  # Curva de probabilidades
  geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup), alpha = 0.3, fill = "steelblue1") +  # Intervalo de confianza
  labs(title = "",
       x = "pct_fran_1stWon",
       y = "Probabilidad Estimada") +
  theme_minimal()

#variable 2

valores_var <- data.frame(pct_fran_2ndWon = seq(0, 1, length.out = 100))

valores_var$pct_fran_1stWon <- mean(cerundolo_modelo$pct_fran_1stWon, na.rm = TRUE)
valores_var$pct_opp_2ndWon <- mean(cerundolo_modelo$pct_opp_2ndWon, na.rm = TRUE)
valores_var$pct_fran_bp_wins <- mean(cerundolo_modelo$pct_fran_bp_wins, na.rm = TRUE)
valores_var$pct_opp_bp_wins <- mean(cerundolo_modelo$pct_opp_bp_wins, na.rm = TRUE)

valores_var$cat2 <- "(0.65,0.7]" 

# Obtener predicciones y errores estándar con predict()
predicciones <- predict(modelo_final, newdata = valores_var, type = "link", se.fit = TRUE)

# Convertir las predicciones al espacio de probabilidades usando la función logística
valores_var$pred_prob <- plogis(predicciones$fit)

# Calcular el intervalo de confianza (95%)
valores_var$conf_inf <- plogis(predicciones$fit - 1.96 * predicciones$se.fit)
valores_var$conf_sup <- plogis(predicciones$fit + 1.96 * predicciones$se.fit)

# Graficar la curva con el intervalo de confianza
G2 = ggplot(valores_var, aes(x = pct_fran_2ndWon, y = pred_prob)) +
  geom_line(color = "steelblue3", size = 1) +  # Curva de probabilidades
  geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup), alpha = 0.3, fill = "steelblue1") +  # Intervalo de confianza
  labs(title = "",
       x = "pct_fran_2ndWon",
       y = "Probabilidad Estimada") +
  theme_minimal()

#variable 3

valores_var <- data.frame(pct_opp_2ndWon = seq(0, 1, length.out = 100))

# Puedes usar los valores medios o cualquier valor relevante
valores_var$pct_fran_1stWon <- mean(cerundolo_modelo$pct_fran_1stWon, na.rm = TRUE)
valores_var$pct_fran_2ndWon <- mean(cerundolo_modelo$pct_fran_2ndWon, na.rm = TRUE)
valores_var$pct_fran_bp_wins <- mean(cerundolo_modelo$pct_fran_bp_wins, na.rm = TRUE)
valores_var$pct_opp_bp_wins <- mean(cerundolo_modelo$pct_opp_bp_wins, na.rm = TRUE)

valores_var$cat2 <- "(0.65,0.7]" 

# Obtener predicciones y errores estándar con predict()
predicciones <- predict(modelo_final, newdata = valores_var, type = "link", se.fit = TRUE)

# Convertir las predicciones al espacio de probabilidades usando la función logística
valores_var$pred_prob <- plogis(predicciones$fit)

# Calcular el intervalo de confianza (95%)
valores_var$conf_inf <- plogis(predicciones$fit - 1.96 * predicciones$se.fit)
valores_var$conf_sup <- plogis(predicciones$fit + 1.96 * predicciones$se.fit)

# Graficar la curva con el intervalo de confianza
G3 = ggplot(valores_var, aes(x = pct_opp_2ndWon, y = pred_prob)) +
  geom_line(color = "steelblue3", size = 1) +  # Curva de probabilidades
  geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup), alpha = 0.3, fill = "steelblue1") +  # Intervalo de confianza
  labs(title = "",
       x = "pct_opp_2ndWon",
       y = "Probabilidad Estimada") +
  theme_minimal()

#variable 4

valores_var <- data.frame(pct_fran_bp_wins = seq(0, 1, length.out = 100))

# Puedes usar los valores medios o cualquier valor relevante
valores_var$pct_fran_1stWon <- mean(cerundolo_modelo$pct_fran_1stWon, na.rm = TRUE)
valores_var$pct_fran_2ndWon <- mean(cerundolo_modelo$pct_fran_2ndWon, na.rm = TRUE)
valores_var$pct_opp_2ndWon <- mean(cerundolo_modelo$pct_opp_2ndWon, na.rm = TRUE)
valores_var$pct_opp_bp_wins <- mean(cerundolo_modelo$pct_opp_bp_wins, na.rm = TRUE)

valores_var$cat2 <- "(0.65,0.7]" 

# Obtener predicciones y errores estándar con predict()
predicciones <- predict(modelo_final, newdata = valores_var, type = "link", se.fit = TRUE)

# Convertir las predicciones al espacio de probabilidades usando la función logística
valores_var$pred_prob <- plogis(predicciones$fit)

# Calcular el intervalo de confianza (95%)
valores_var$conf_inf <- plogis(predicciones$fit - 1.96 * predicciones$se.fit)
valores_var$conf_sup <- plogis(predicciones$fit + 1.96 * predicciones$se.fit)

# Graficar la curva con el intervalo de confianza
G4 = ggplot(valores_var, aes(x = pct_fran_bp_wins, y = pred_prob)) +
  geom_line(color = "steelblue3", size = 1) +  # Curva de probabilidades
  geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup), alpha = 0.3, fill = "steelblue1") +  # Intervalo de confianza
  labs(title = "",
       x = "pct_fran_bp_wins",
       y = "Probabilidad Estimada") +
  theme_minimal()

#variable 5

valores_var <- data.frame(pct_opp_bp_wins = seq(0, 1, length.out = 100))

# Puedes usar los valores medios o cualquier valor relevante
valores_var$pct_fran_1stWon <- mean(cerundolo_modelo$pct_fran_1stWon, na.rm = TRUE)

valores_var$pct_fran_2ndWon <- mean(cerundolo_modelo$pct_fran_2ndWon, na.rm = TRUE)
valores_var$pct_opp_2ndWon <- mean(cerundolo_modelo$pct_opp_2ndWon, na.rm = TRUE)
valores_var$pct_fran_bp_wins <- mean(cerundolo_modelo$pct_fran_bp_wins, na.rm = TRUE)

valores_var$cat2 <- "(0.65,0.7]" 

# Obtener predicciones y errores estándar con predict()
predicciones <- predict(modelo_final, newdata = valores_var, type = "link", se.fit = TRUE)

# Convertir las predicciones al espacio de probabilidades usando la función logística
valores_var$pred_prob <- plogis(predicciones$fit)

# Calcular el intervalo de confianza (95%)
valores_var$conf_inf <- plogis(predicciones$fit - 1.96 * predicciones$se.fit)
valores_var$conf_sup <- plogis(predicciones$fit + 1.96 * predicciones$se.fit)

# Graficar la curva con el intervalo de confianza
G5 = ggplot(valores_var, aes(x = pct_opp_bp_wins, y = pred_prob)) +
  geom_line(color = "steelblue3", size = 1) +  # Curva de probabilidades
  geom_ribbon(aes(ymin = conf_inf, ymax = conf_sup), alpha = 0.3, fill = "steelblue1") +  # Intervalo de confianza
  labs(title = "",
       x = "pct_opp_bp_wins",
       y = "Probabilidad Estimada") +
  theme_minimal()

grid.arrange(G1, G2, G3, G4, G5, ncol = 2)
```

Observamos que la tasa de cambio máxima en la probabilidad de victoria de Fran será mas alta para la variable `pct_fran_1stWon`.

### Variable categórica

Se calculan las probabilidades estimadas para cada una de las categorías de la variable `pct_opp_1stWon`, dejando las demás variables fijas en su media.

```{r, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

ro_40 = exp(12.432)
ro_41 = exp(-3.867-(-12.432))
ro_42 = exp(-5.629814-(-12.432))
ro_43 = exp(-5.208581-(-12.432))

eta_d0= exp(-16.232947+ 36.196*(mean(cerundolo_modelo$pct_fran_1stWon)) +19.615*(mean(cerundolo_modelo$pct_fran_2ndWon)) - 26.492*(mean(cerundolo_modelo$pct_opp_2ndWon)) + 8.883*(mean(cerundolo_modelo$pct_fran_bp_wins)) - 7.401*(mean(cerundolo_modelo$pct_opp_bp_wins)))

prob_d0 = eta_d0/(1+eta_d0)
prob_d0

eta_d1= exp(-16.232947+ 36.196*(mean(cerundolo_modelo$pct_fran_1stWon))- 3.867 +19.615*(mean(cerundolo_modelo$pct_fran_2ndWon)) - 26.492*(mean(cerundolo_modelo$pct_opp_2ndWon)) + 8.883*(mean(cerundolo_modelo$pct_fran_bp_wins)) - 7.401*(mean(cerundolo_modelo$pct_opp_bp_wins)))

prob_d1 = eta_d1/(1+eta_d1)
prob_d1

eta_d2= exp(-16.232947+ 36.196*(mean(cerundolo_modelo$pct_fran_1stWon))-5.629 +19.615*(mean(cerundolo_modelo$pct_fran_2ndWon)) - 26.492*(mean(cerundolo_modelo$pct_opp_2ndWon)) + 8.883*(mean(cerundolo_modelo$pct_fran_bp_wins)) - 7.401*(mean(cerundolo_modelo$pct_opp_bp_wins)))

prob_d2 = eta_d2/(1+eta_d2)
prob_d2

eta_d3= exp(-16.232947+ 36.196*(mean(cerundolo_modelo$pct_fran_1stWon))-5.208 +19.615*(mean(cerundolo_modelo$pct_fran_2ndWon)) - 26.492*(mean(cerundolo_modelo$pct_opp_2ndWon)) + 8.883*(mean(cerundolo_modelo$pct_fran_bp_wins)) - 7.401*(mean(cerundolo_modelo$pct_opp_bp_wins)))

prob_d3 = eta_d3/(1+eta_d3)
prob_d3

eta_d4= exp(-16.232947+ 36.196*(mean(cerundolo_modelo$pct_fran_1stWon))-12.432 +19.615*(mean(cerundolo_modelo$pct_fran_2ndWon)) - 26.492*(mean(cerundolo_modelo$pct_opp_2ndWon)) + 8.883*(mean(cerundolo_modelo$pct_fran_bp_wins)) - 7.401*(mean(cerundolo_modelo$pct_opp_bp_wins)))

prob_d4 = eta_d4/(1+eta_d4)
prob_d4


```

$\hat{\pi}_{(0,0.6)} = 0.9959$

$\hat{\pi}_{(0.6,0.65)} = 0.8356$

$\hat{\pi}_{(0.65,0.7)} = 0.4660$

$\hat{\pi}_{(0.7,0.75)} = 0.5707$

$\hat{\pi}_{(0.75,Inf)} = 0.0009$

Se puede concluir que si Francisco logra dejar a su rival en menos del 65% de puntos ganados con el primer servicio, las probabilidades de ganar el partido son muy altas. Mientras que si el porcentaje de puntos ganados con el primer servicio del rival ronda entra el 65% y 75%, se puede pensar que cualquiera de los dos jugadores puede quedarse con el partido. Por último si el rival de Fran gana mas del 75% de los puntos con el primer servicio, la probabilidad de ganar el partido para el argentino seran muy bajas.

## Predicciones

Para poder evaluar la capacidad predictiva del modelo, se trabaja con una base de datos de los 24 partidos de Fran, luego del último partido cargado en la base principal. Se presenta la tabla con las predicciones versus el resultado real:

```{r, echo=FALSE, warning=FALSE, message=FALSE}
cerundolo_prediccion <- read_excel("C:/Users/Usuario/Desktop/Estadistica/Analisis-Francisco-Cerundolo/cerundolo_prediccion.xlsx")

cerundolo_prediccion1 = subset(cerundolo_prediccion, select = -c(fran_win))

cerundolo_prediccion1 <- cerundolo_prediccion1 %>%
  mutate(cat2= cut(pct_opp_1stWon, breaks = c(0, 0.6, 0.65, 0.7, 0.75, Inf)))

predicciones <- predict(modelo_final, newdata = cerundolo_prediccion1, type = "response")

predicciones = round(predicciones,3)

pred_clasificacion <- ifelse(predicciones > 0.5, 1, 0) 

tabla=table(factor(pred_clasificacion), factor(cerundolo_prediccion$fran_win))

dimnames(tabla) <- list(
  "Predicción" = c("Perdió", "Ganó"),
  "Observaciones" = c("Perdió", "Ganó")
)

tabla3 = tabla %>%
  kable("html", caption = "Tabla 3: Predichos vs. Observados") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),position = "center",full_width = F) %>% row_spec(0, bold = T, background = "steelblue1", color = "black") %>%
  column_spec(1, bold = TRUE, background="steelblue1")

tabla3

```

En la Tabla 3, se puede observar que el modelo predijo que Fran iba a perder de manera acertada 9 de 11 veces (especifidad del 81.8%) y predijo que Fran iba a ganar de manera acertada 12 de 13 veces (sensibilidad del 92.3%). A pesar de probarlo con pocos datos, el modelo parece tener una buena capacidad predictiva (accuracy del 87.5%).

## Conclusiones

Luego de finalizar este extenso y minusioso análisis sobre las características y condiciones que pueden afectar el desempeño de Fran, se obtuvieron las siguientes conclusiones:

-   Muchas de las variables medidas en este estudio no resultaron influyentes a la hora de evaluar la probabilidad de victoria en un partido del jugador, lo cual da un indicio de (algo ya sabido por los especialistas del deporte) que Francisco es un jugador particular, que no se ve influenciado por condiciones como la duración de los partidos, el nivel del rival, la superficie, la presión por jugar un partido en una instancia decisiva, entre otras cosas, sino más bien en como se siente él dentro de la cancha ese día.

-   Como la probabilidad de ganar aumenta en gran magnitud ante pequeños aumentos del porcentaje de puntos ganados con el primer servicio, se recomendaría al entrenador de Fran centrarse en este aspecto a la hora de planificar sus entrenamientos.

-   Algo a tener en cuenta, es que a la hora de realizar predicciones, el modelo utiliza variables que son medidas una vez que termina el partido, por lo que no sería posible realizar estas predicciones para partidos futuros. Lo que se propone es utilizar los promedios históricos de los rivales y de Cerúndolo en estas variables y de esta manera realizar dichas predicciones.
